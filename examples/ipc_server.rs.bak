#![feature(alloc)]
#![no_std]

extern crate alloc;

use core::fmt::Write;
use alloc::string::String;
use libtock::console::Console;
use libtock::ipc_server;
use libtock::ipc_server::IpcServerCallback;
use libtock::ipc_server::IpcServerDriver;
use libtock::syscalls;

#[allow(unreachable_code)]
// Prints the payload and adds one to the first byte.
async fn main() {
    let drivers = libtock::retrieve_drivers()?;
    let mut console = drivers.console.create_console();

    console.write(String::from("Start service:\n"));

    let mut callback =
        IpcServerCallback::new(|pid: usize, _: usize, message: &mut [u8]| {
        console.write(String::from("Server: \"Payload: "));

        console.write(message[0] as u32);
        console.write(String::from("\"\n"));
        message[0] += 1;
        ipc_server::notify_client(pid);
    });

    let _server = IpcServerDriver::start(&mut callback);

    loop {
        unsafe {
            syscalls::yieldk();
        }
    }
    Ok(());
    _server.unwrap();
}
